// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Message = exports.Message = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineMessage()

function defineMessage () {
  Message.TYPE = {
    CONNECT: 1,
    LISTEN: 2,
    UNLISTEN: 3,
    LISTENING: 4,
    STREAM: 5,
    PING: 6,
    PONG: 7
  }

  var Connect = Message.Connect = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Unlisten = Message.Unlisten = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Listen = Message.Listen = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Listening = Message.Listening = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineConnect()
  defineUnlisten()
  defineListen()
  defineListening()

  function defineConnect () {
    var enc = [
      encodings.bytes
    ]

    Connect.encodingLength = encodingLength
    Connect.encode = encode
    Connect.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.topic)) throw new Error("topic is required")
      var len = enc[0].encodingLength(obj.topic)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.topic)) throw new Error("topic is required")
      buf[offset++] = 10
      enc[0].encode(obj.topic, buf, offset)
      offset += enc[0].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        topic: null
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.topic = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineUnlisten () {
    var enc = [
      encodings.bytes
    ]

    Unlisten.encodingLength = encodingLength
    Unlisten.encode = encode
    Unlisten.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.id)) throw new Error("id is required")
      var len = enc[0].encodingLength(obj.id)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.id)) throw new Error("id is required")
      buf[offset++] = 10
      enc[0].encode(obj.id, buf, offset)
      offset += enc[0].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        id: null
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.id = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineListen () {
    var enc = [
      encodings.bytes
    ]

    Listen.encodingLength = encodingLength
    Listen.encode = encode
    Listen.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.id)) throw new Error("id is required")
      var len = enc[0].encodingLength(obj.id)
      length += 1 + len
      if (!defined(obj.topic)) throw new Error("topic is required")
      var len = enc[0].encodingLength(obj.topic)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.id)) throw new Error("id is required")
      buf[offset++] = 10
      enc[0].encode(obj.id, buf, offset)
      offset += enc[0].encode.bytes
      if (!defined(obj.topic)) throw new Error("topic is required")
      buf[offset++] = 18
      enc[0].encode(obj.topic, buf, offset)
      offset += enc[0].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        id: null,
        topic: null
      }
      var found0 = false
      var found1 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.id = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          case 2:
          obj.topic = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found1 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineListening () {
    var enc = [
      encodings.varint
    ]

    Listening.encodingLength = encodingLength
    Listening.encode = encode
    Listening.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.port)) throw new Error("port is required")
      var len = enc[0].encodingLength(obj.port)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.port)) throw new Error("port is required")
      buf[offset++] = 8
      enc[0].encode(obj.port, buf, offset)
      offset += enc[0].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        port: 0
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.port = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  var enc = [
    encodings.enum,
    encodings.bytes
  ]

  Message.encodingLength = encodingLength
  Message.encode = encode
  Message.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.type)) throw new Error("type is required")
    var len = enc[0].encodingLength(obj.type)
    length += 1 + len
    if (defined(obj.data)) {
      var len = enc[1].encodingLength(obj.data)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 8
    enc[0].encode(obj.type, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.data)) {
      buf[offset++] = 18
      enc[1].encode(obj.data, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: 1,
      data: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.data = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
